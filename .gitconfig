[user]
  name  = Ben Chidgey
  email = ben@feedmypixel.com

[alias]
  br  = branch
  ci  = commit
  co  = checkout
  df  = diff
  g   = grep -I
  loq = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative
  sm  = show-merges
  st  = status
  
  # Show the user email for the current repository.
  whoami = config user.email
  
  # Remove branches that have already been merged with main.
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
  
  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"
  
  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"
  
  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
  
  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
  
  # View the current working tree status using the short format.
  s = status -s
  
  # Show the diff between the latest commit and the current state.
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
  
  # `git di $number` shows the diff between the state `$number` revisions ago and the current state.
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
  
  # View abbreviated SHA, description, and history graph of the latest 20 commits.
  l = log --pretty=oneline -n 20 --graph --abbrev-commit
  
[apply]

	# Detect whitespace errors when applying a patch.
	whitespace = fix  

[branch]
  autosetuprebase = always
  
  # Show most recently changed branches first.
	sort = -committerdate
  
[core]

	# Use custom `.gitignore` and `.gitattributes`.
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error.
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS.
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true  

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto

[color "branch"]
  current = yellow reverse
  local   = yellow
  remote  = green

[color "diff"]
  meta = yellow 
  frag = magenta 
  old  = red 
  new  = green 

[color "status"]
  added     = yellow
  changed   = green
  untracked = cyan

[diff]
  tool = Kaleidoscope
  
  # Detect copies as well as renames.
	renames = copies

[diff "exif"]
  textconv = exiftool

[difftool]
  prompt = false

[merge]
  log = true

[push]
  default = simple

[rerere]
  enabled = 1

[url "git@github.com:"]
  insteadOf     = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
  insteadOf = "github:"

[url "git@gist.github.com:"]
  insteadOf     = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
  insteadOf = "gist:"

[url "git@heroku.com:"]
  insteadOf = "heroku:"

[init]

  defaultBranch = main
